in AuthContext.tsx, SCRIPT_URL being defined with VITE_* prefix maybe potentially dangerous cuz script url exposing to client blablablalablablalb

title on iconbutton hover

is PO tasks just about POs or its regular task but with POs / every tasks can upload multiple POs and random files

every edit and delete and add action must have confirm dialog

use better authentication and authorization method via @react-oauth/google (authorization code flow) and app-script-oauth library 
- https://github.com/googleworkspace/apps-script-oauth2
- https://react-oauth.vercel.app/
- https://github.com/MomenSherif/react-oauth/issues/12#issuecomment-1131408898

force upload PO file pdf, jpeg 

MAKE DATABASE SWITCHING MECHANISM FOR TESTING AFTER DEPLOYMENT

in ProjectDetail tasks that need help just highlight the row in purple and show it in detaildialog instead of showing in the table

check why some table column do line break while some dont

ask p pat about how many PO task status are there / NOT SURE YET
talk p pat task list pagination

edittaskdialog: reason should only be entered || visible when 
    - deadline is edited
    - status change to anything thats not "Done" (if we change status from * -> done, log will always be "REASON: Task done.");
    - new file upload

IMPORTANT MAKE HELPME WORK PROPERLY 
***************************create project can only set tasks' deadline not more than date we gumnod (mindate, maxdate);

in projectdetails page, separate team/assignee combobox to two?????

translate to thai all


// EditTask for Dealer flow
Of course. Here is a recommended user journey for your "Edit Dealer's Task" form, focusing on clarity, efficiency, and providing good user feedback.

The journey can be broken down into four main phases:

---

### 1. Entry Point & Initial State

This phase is about getting the user into the form with the right context.

* **Entry**: The user is viewing a list or dashboard of tasks. They identify the task they need to edit and click an **Edit** icon or button on that specific task's row.
* **Loading**: The "Edit Task" form appears in a **modal window**. This keeps the user in the context of the task list they were just viewing.
* **Pre-filled Data**: The form loads with all fields **pre-populated** with the current data for that task. The deadline, task status, PO status, and a list of already uploaded PO files are all visible.
* **Focus**: The cursor is automatically focused on the **"Editing Details"** textarea, as this is the primary field they need to fill out to explain their changes. The "Save" button is initially disabled.



---

### 2. The Editing Flow (Interaction)

This is the core interaction phase where the form should be smart and guide the user.

* **User Action**: The user begins by typing their reason for the edit in the **"Editing Details"** textarea. As soon as they type, the **Save** button becomes enabled.
* **Changing Status**:
    * The user changes the **Task Status**. The most common flow is to update the status and provide a reason in the "Editing Details" field.
    * **Conditional Logic**: If the user selects **"Help me,"** a new required field or section should appear below it, asking for "Help Details" or "Assign to Team." This makes the "Help me" status immediately actionable.
* **File Management**:
    * The user can see existing **PO File(s)**. Each file has a clear "Delete" (X) icon next to it.
    * They can upload new files via a drag-and-drop area or a "Browse Files" button. Uploads should show a progress bar and appear in the file list upon completion.
* **Changing PO Status**: The user can update the **PO Status** from the dropdown. This works independently but is often done in conjunction with updating the main **Task Status**.

---

### 3. Submission & Feedback

This phase is critical for ensuring the user knows their action was successful.

* **Validation**: The user clicks **Save**. The form does a quick check. The **"Editing Details"** field must be filled out. If not, an inline error appears (e.g., "Please provide a reason for this update.").
* **Pending State**: While the data is saving, the **Save** button is disabled and its text changes to "Saving...". All fields in the form are also temporarily disabled to prevent further changes.
* **Success**:
    * The request succeeds.
    * The modal closes automatically.
    * A small, non-intrusive **toast notification** appears on the screen (e.g., "Task updated successfully!").
    * The original task list in the background automatically refreshes to show the updated data in the table.
* **Failure**:
    * The request fails.
    * An error message appears **inside the modal** (e.g., "Error: Could not save changes. Please try again.").
    * The "Save" button and form fields become enabled again, allowing the user to try again without losing their changes.

---

### 4. Exit

* **Cancel Action**: At any point, the user can click a **Cancel** button or an **"X"** icon in the corner of the modal.
* **Confirmation (Optional but Recommended)**: If the user has made any changes to the form, a confirmation dialog appears: "You have unsaved changes. Are you sure you want to close?" This prevents accidental data loss.
